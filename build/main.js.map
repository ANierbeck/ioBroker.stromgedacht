{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\"use strict\";\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport axios from \"axios\";\n\n// tslint:disable no-var-requires\nconst adapterName = require(\"./../package.json\").name.split(\".\").pop();\n/* tslint:disable no-var-requires */\nconst instanceObjects = require(\"./../io-package.json\").instanceObjects;\n\ninterface State {\n\tfrom: string;\n\tto: string;\n\tstate: number;\n}\n\nenum StateEnum {\n\tSUPERGRUEN = -1,\n\tGRUEN = 1,\n\tORANGE = 2,\n\tROT = 3,\n}\n\nconst stromgedachtStateApi = \"https://api.stromgedacht.de/v1/statesRelative\";\nconst stromgedachtForecastApi = \"https://api.stromgedacht.de/v1/forecast\";\n\nconst statePaths = [\n\t\"forecast.states.supergruen\",\n\t\"forecast.states.gruen\",\n\t\"forecast.states.orange\",\n\t\"forecast.states.rot\",\n];\n\nclass Stromgedacht extends utils.Adapter {\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: adapterName,\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tasync onReady(): Promise<void> {\n\t\t//schedule it to run every 2 hours\n\t\tthis.log.info(`config zipcode: ${this.config.zipcode}`);\n\n\t\tif (this.config.zipcode === undefined || this.config.zipcode === \"\") {\n\t\t\tthis.log.error(\"No zipcode configured\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.config.influxinstance) {\n\t\t\tthis.log.info(\"InfluxDB logging is enabled - forecasts will be available\");\n\t\t}\n\n\t\t//cleanup of old states\n\t\tthis.log.debug(`removing stale states`);\n\t\tfor (const path of statePaths) {\n\t\t\tthis.log.debug(`Deleting states for ${path}`);\n\t\t\tawait this.getChannelsOfAsync(path).then((channels) => {\n\t\t\t\tthis.log.debug(`Channels to remove: ${JSON.stringify(channels)}`);\n\t\t\t\tfor (const channel of channels) {\n\t\t\t\t\tthis.log.debug(`ChannelID: ${channel._id}`);\n\t\t\t\t\tthis.delObject(channel._id);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.log.debug(`recreating states`);\n\t\t//recreate basic object structure\n\t\tfor (const obj of instanceObjects) {\n\t\t\tthis.log.debug(`Creating object ${obj._id}`);\n\t\t\tawait this.setObjectNotExistsAsync(obj._id, obj);\n\t\t}\n\n\t\tthis.requestStates()\n\t\t\t.then(async (response) => {\n\t\t\t\tif (response === null) {\n\t\t\t\t\tthis.log.error(`No response received`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.log.debug(`Received states for ${this.config.zipcode}: ${JSON.stringify(response.data)}`);\n\t\t\t\tthis.setState(\"forecast.states.json\", JSON.stringify(response.data), true);\n\t\t\t\tthis.setState(\"forecast.states.hoursInFuture\", this.config.hoursInFuture, true);\n\t\t\t\tthis.setState(\"info.connection\", true, true);\n\t\t\t\treturn response.data;\n\t\t\t})\n\t\t\t.then(async (data) => this.parseState(data))\n\t\t\t.catch(async (error) => {\n\t\t\t\tthis.log.error(`Error: ${error.message}`);\n\t\t\t\tthis.setState(\"info.connection\", false, true);\n\t\t\t\tif (this.terminate) {\n\t\t\t\t\tthis.terminate(15);\n\t\t\t\t} else {\n\t\t\t\t\tprocess.exit(15);\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis.requestForecast()\n\t\t\t.then(async (response) => {\n\t\t\t\tif (response === null) {\n\t\t\t\t\tthis.log.error(`No response received`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.log.debug(`Received forecast for ${this.config.zipcode}: ${JSON.stringify(response.data)}`);\n\t\t\t\treturn response.data;\n\t\t\t})\n\t\t\t.then(async (data) => this.parseForecast(data))\n\t\t\t.catch(async (error) => {\n\t\t\t\tthis.log.error(`Error: ${error.message}`);\n\t\t\t\tawait this.setState(\"info.connection\", false, true);\n\t\t\t\tif (this.terminate) {\n\t\t\t\t\tthis.terminate(15);\n\t\t\t\t} else {\n\t\t\t\t\tprocess.exit(15);\n\t\t\t\t}\n\t\t\t});\n\n\t\tawait this.setState(\"info.connection\", false, true);\n\t\tif (this.terminate) {\n\t\t\tthis.terminate(15);\n\t\t} else {\n\t\t\tprocess.exit(15);\n\t\t}\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\t\t\t// setting connection state to false\n\t\t\tthis.setState(\"info.connection\", false, true);\n\t\t\tthis.log.info(\"cleaned everything up...\");\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tthis.log.error(`Error during unload: ${e}`);\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * Sends a request to the stromgedacht API to retrieve states based on the provided zipcode and hoursInFuture.\n\t * @returns A promise that resolves to an AxiosResponse object containing the API response.\n\t */\n\tasync requestStates(): Promise<axios.AxiosResponse<any, any>> {\n\t\tconst zipcode = this.config.zipcode;\n\t\tconst hoursInFuture = this.config.hoursInFuture;\n\n\t\tconst queryParams = {\n\t\t\tzip: zipcode,\n\t\t\thoursInFuture: hoursInFuture,\n\t\t};\n\n\t\treturn axios({\n\t\t\tmethod: \"get\",\n\t\t\tbaseURL: stromgedachtStateApi,\n\t\t\tparams: queryParams,\n\t\t\ttimeout: 10000,\n\t\t\tresponseType: \"json\",\n\t\t\tvalidateStatus: (status) => status === 200,\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response;\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tif (error.response) {\n\t\t\t\t\tthis.log.error(`Error: ${error.response.status}`);\n\t\t\t\t} else if (error.request) {\n\t\t\t\t\tthis.log.error(`Error: no data received for time frame`);\n\t\t\t\t} else {\n\t\t\t\t\tthis.log.error(`Error: ${error.message}`);\n\t\t\t\t}\n\t\t\t\tconsole.log(error.config);\n\t\t\t\tthrow error;\n\t\t\t});\n\t}\n\n\tasync requestForecast(): Promise<axios.AxiosResponse<any, any>> {\n\t\tconst zipcode = this.config.zipcode;\n\t\tconst daysInPast = this.config.daysInPast;\n\n\t\tconst fromDate = new Date();\n\t\tfromDate.setDate(fromDate.getDate() - daysInPast);\n\n\t\tconst queryParams = {\n\t\t\tzip: zipcode,\n\t\t\tfrom: fromDate.toDateString(),\n\t\t};\n\n\t\treturn axios({\n\t\t\tmethod: \"get\",\n\t\t\tbaseURL: stromgedachtForecastApi,\n\t\t\tparams: queryParams,\n\t\t\ttimeout: 10000,\n\t\t\tresponseType: \"json\",\n\t\t\tvalidateStatus: (status) => status === 200,\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response;\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tif (error.response) {\n\t\t\t\t\tthis.log.error(`Error: ${error.response.status}`);\n\t\t\t\t} else if (error.request) {\n\t\t\t\t\tthis.log.error(`Error: no data received for forecast`);\n\t\t\t\t} else {\n\t\t\t\t\tthis.log.error(`Error: ${error.message}`);\n\t\t\t\t}\n\t\t\t\tconsole.log(error.config);\n\t\t\t\tthrow error;\n\t\t\t});\n\t}\n\n\t/**\n\t * Parses the state from the provided JSON object and sets the corresponding states in the system.\n\t * @param json - The JSON object containing the states.\n\t */\n\tasync parseState(json: any): Promise<void> {\n\t\tthis.log.debug(`Parsing state ${JSON.stringify(json)}`);\n\t\tconst states: State[] = json.states;\n\t\tthis.log.debug(`States: ${JSON.stringify(states)}`);\n\n\t\tconst supergruenStates: State[] = [];\n\t\tconst supergruenTimeseries: [Date, number][] = [];\n\t\tconst gruenStates: State[] = [];\n\t\tconst gruenTimeseries: [Date, number][] = [];\n\t\tconst gelbStates: State[] = [];\n\t\tconst gelbTimeseries: [Date, number][] = [];\n\t\tconst rotStates: State[] = [];\n\t\tconst rotTimeseries: [Date, number][] = [];\n\t\tconst timeseries: [Date, number][] = [];\n\t\tstates.forEach((state: any) => {\n\t\t\tconst timeDifference = this.getTimeOffset(new Date(state.from), new Date(state.to));\n\t\t\tconst offSet = this.getOffset(new Date(state.from));\n\n\t\t\tswitch (state.state) {\n\t\t\t\tcase StateEnum.SUPERGRUEN: //supergruen\n\t\t\t\t\tsupergruenStates.push(state);\n\t\t\t\t\tfor (let i = 0; i < timeDifference; i++) {\n\t\t\t\t\t\tconst newTime = (state.from = new Date(state.from)).getTime() + i * 60 * 60 * 1000 - offSet;\n\t\t\t\t\t\tconst timeslot = new Date(newTime);\n\t\t\t\t\t\tsupergruenTimeseries.push([timeslot, 1]);\n\t\t\t\t\t\t//at this point we can push the specific supergreen data to influxdb\n\t\t\t\t\t\tthis.addToInfluxDB(\"forecast.state.supergruen\", timeslot.getTime(), 1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase StateEnum.GRUEN: //gruen\n\t\t\t\t\tgruenStates.push(state);\n\t\t\t\t\tfor (let i = 0; i < timeDifference; i++) {\n\t\t\t\t\t\tconst newTime = (state.from = new Date(state.from)).getTime() + i * 60 * 60 * 1000 - offSet;\n\t\t\t\t\t\tconst timeslot = new Date(newTime);\n\t\t\t\t\t\tgruenTimeseries.push([timeslot, 1]);\n\t\t\t\t\t\t//at this point we can push the specific green data to influxdb\n\t\t\t\t\t\tthis.addToInfluxDB(\"forecast.state.gruen\", timeslot.getTime(), 1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase StateEnum.ORANGE: //orange\n\t\t\t\t\tgelbStates.push(state);\n\t\t\t\t\tfor (let i = 0; i < timeDifference; i++) {\n\t\t\t\t\t\tconst newTime = (state.from = new Date(state.from)).getTime() + i * 60 * 60 * 1000 - offSet;\n\t\t\t\t\t\tconst timeslot = new Date(newTime);\n\t\t\t\t\t\tgelbTimeseries.push([timeslot, 1]);\n\t\t\t\t\t\t//at this point we can push the specific orange data to influxdb\n\t\t\t\t\t\tthis.addToInfluxDB(\"forecast.state.orange\", timeslot.getTime(), 1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase StateEnum.ROT: //rot\n\t\t\t\t\trotStates.push(state);\n\t\t\t\t\tfor (let i = 0; i < timeDifference; i++) {\n\t\t\t\t\t\tconst newTime = (state.from = new Date(state.from)).getTime() + i * 60 * 60 * 1000 - offSet;\n\t\t\t\t\t\tconst timeslot = new Date(newTime);\n\t\t\t\t\t\trotTimeseries.push([timeslot, 1]);\n\t\t\t\t\t\t//at this point we can push the specific red data to influxdb\n\t\t\t\t\t\tthis.addToInfluxDB(\"forecast.state.red\", timeslot.getTime(), 1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < timeDifference; i++) {\n\t\t\t\tconst newTime = (state.from = new Date(state.from)).getTime() + i * 60 * 60 * 1000 - offSet;\n\t\t\t\tconst timeslot = new Date(newTime);\n\t\t\t\tconst timeslotState = state.state;\n\t\t\t\ttimeseries.push([timeslot, timeslotState]);\n\t\t\t\t//at this point we can push \"all data\" to influxdb\n\t\t\t\tthis.addToInfluxDB(\"forecast.states\", timeslot.getTime(), timeslotState);\n\t\t\t}\n\t\t});\n\n\t\tthis.log.debug(`Timeseries: ${JSON.stringify(timeseries)}`);\n\t\tthis.setState(\"forecast.states.timeseries\", JSON.stringify(timeseries), true);\n\t\tthis.setForecastStates(supergruenStates, \"forecast.states.supergruen\", supergruenTimeseries);\n\t\tthis.setForecastStates(gruenStates, \"forecast.states.gruen\", gruenTimeseries);\n\t\tthis.setForecastStates(gelbStates, \"forecast.states.orange\", gelbTimeseries);\n\t\tthis.setForecastStates(rotStates, \"forecast.states.rot\", rotTimeseries);\n\t\tthis.setState(\"forecast.states.lastUpdated\", new Date().toString(), true);\n\t}\n\n\t/**\n\t * Parses the forecast from the provided JSON object and sets the corresponding states in the system.\n\t * @param json - The JSON object containing the forecast.\n\t */\n\tparseForecast(json: any): any {\n\t\tif (json.load != undefined) {\n\t\t\tthis.setState(\"forecast.load.json\", JSON.stringify(json.load), true);\n\t\t\tthis.setState(\"forecast.load.lastUpdated\", new Date().toString(), true);\n\t\t} else {\n\t\t\tthis.log.error(`No load data received`);\n\t\t}\n\t\tif (json.renewableEnergy != undefined) {\n\t\t\tthis.setState(\"forecast.renewableEnergy.json\", JSON.stringify(json.renewableEnergy), true);\n\t\t\tthis.setState(\"forecast.renewableEnergy.lastUpdated\", new Date().toString(), true);\n\t\t} else {\n\t\t\tthis.log.error(`No renewableEnergy data received`);\n\t\t}\n\t\tif (json.residualLoad != undefined) {\n\t\t\tthis.setState(\"forecast.residualLoad.json\", JSON.stringify(json.residualLoad), true);\n\t\t\tthis.setState(\"forecast.residualLoad.lastUpdated\", new Date().toString(), true);\n\t\t} else {\n\t\t\tthis.log.error(`No residualLoad data received`);\n\t\t}\n\t\tif (json.superGreenThreshold != undefined) {\n\t\t\tthis.setState(\"forecast.superGreenThreshold.json\", JSON.stringify(json.superGreenThreshold), true);\n\t\t\tthis.setState(\"forecast.superGreenThreshold.lastUpdated\", new Date().toString(), true);\n\t\t} else {\n\t\t\tthis.log.error(`No superGreenThreshold data received`);\n\t\t}\n\t}\n\n\t/**\n\t * Adds data to InfluxDB.\n\t * @param datapoint - The name of the datapoint where to store the data\n\t * @param timestamp - The timestamp of the data\n\t * @param value - The value of the data\n\t */\n\tprivate async addToInfluxDB(datapoint: string, timestamp: number, value: number): Promise<void> {\n\t\tif (this.config.influxinstance) {\n\t\t\tlet influxInstance = this.config.influxinstance;\n\n\t\t\t// Fallback for older instance configs\n\t\t\tif (!influxInstance.startsWith(\"influxdb.\")) {\n\t\t\t\tinfluxInstance = `influxdb.${influxInstance}`;\n\t\t\t}\n\n\t\t\tconst result = await this.sendToAsync(influxInstance, \"storeState\", {\n\t\t\t\tid: `${this.namespace}.${datapoint}`,\n\t\t\t\tstate: {\n\t\t\t\t\tts: timestamp,\n\t\t\t\t\tval: value,\n\t\t\t\t\tack: true,\n\t\t\t\t\tfrom: `system.adapter.${this.namespace}`,\n\t\t\t\t},\n\t\t\t});\n\t\t\tthis.log.debug(`InfluxDB result: ${JSON.stringify(result)}`);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the states and corresponding objects in the ioBroker adapter.\n\t * @param states - The array of states to set\n\t * @param stateIdPrefix - The prefix for the state IDs\n\t * @param timeseries - The timeseries data to set\n\t * @returns A promise that resolves when the states and objects are set\n\t */\n\tprivate async setForecastStates(\n\t\tstates: State[],\n\t\tstateIdPrefix: string,\n\t\ttimeseries: [Date, number][],\n\t): Promise<void> {\n\t\tfor (let i = 0; i < states.length; i++) {\n\t\t\tconst stateId = `${stateIdPrefix}.${i}`;\n\t\t\tthis.log.debug(`state ${stateId}`);\n\t\t\tawait this.setObjectNotExists(`${stateId}.begin`, {\n\t\t\t\ttype: \"state\",\n\t\t\t\tcommon: {\n\t\t\t\t\tname: `Begin of ${stateIdPrefix}`,\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\trole: \"time\",\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\t\t\tawait this.setObjectNotExists(`${stateId}.end`, {\n\t\t\t\ttype: \"state\",\n\t\t\t\tcommon: {\n\t\t\t\t\tname: `End of ${stateIdPrefix}`,\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\trole: \"time\",\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\t\t\tconst state = states[i];\n\t\t\tthis.log.debug(`Setting state ${stateId} to ${JSON.stringify(state)}`);\n\t\t\tthis.setState(`${stateId}.begin`, state.from.toString(), true);\n\t\t\tthis.setState(`${stateId}.end`, state.to.toString(), true);\n\t\t}\n\n\t\tthis.setStateAsync(`${stateIdPrefix}.timeseries`, JSON.stringify(timeseries), true);\n\t}\n\n\tgetOffset(from: Date): number {\n\t\tconst offSetMinutes = from.getMinutes();\n\t\tconst offSetSeconds = from.getSeconds();\n\t\tconst offSetMilliseconds = from.getMilliseconds();\n\t\tconst offSet = offSetMinutes * 60 * 1000 + offSetSeconds * 1000 + offSetMilliseconds;\n\t\treturn offSet;\n\t}\n\n\tgetTimeOffset(startDate: Date, endDate: Date): number {\n\t\t// Calculate the time difference in milliseconds\n\t\tconst timeDifference = endDate.getTime() - startDate.getTime();\n\n\t\t// Convert the time difference to hours\n\t\tconst hoursOffset = timeDifference / (1000 * 60 * 60);\n\n\t\treturn hoursOffset;\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Stromgedacht(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Stromgedacht())();\n}\n"],
  "mappings": "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",
  "names": ["StateEnum", "axios"]
}
